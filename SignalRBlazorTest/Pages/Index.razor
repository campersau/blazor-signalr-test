@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging

@implements IAsyncDisposable

<input @bind-value="_message" @onkeyup="OnKeyUp" />

@foreach (var message in _messages)
{
    <li>@message</li>
}

@code {

    private string _message;

    private List<string> _messages = new List<string>();

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/echo")
            .ConfigureLogging(loggerBuilder =>
            {
                loggerBuilder.AddProvider(new BrowserConsoleLoggerProvider());
            })
            .Build();

        _hubConnection.On("message", (string msg) =>
        {
            _messages.Add(msg);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task OnKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await _hubConnection.SendAsync("message", _message);

            _message = null;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }

    private class BrowserConsoleLoggerProvider : ILoggerProvider
    {
        public ILogger CreateLogger(string categoryName) => new BrowserConsoleLogger(categoryName);

        public void Dispose() { }
    }

    private class BrowserConsoleLogger : ILogger
    {
        private readonly string _categoryName;

        public BrowserConsoleLogger(string categoryName)
        {
            _categoryName = categoryName;
        }

        public IDisposable BeginScope<TState>(TState state) => null;

        public bool IsEnabled(LogLevel logLevel) => true;

        public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
        {
            var message = $"{_categoryName}: {formatter(state, exception)}";
            Console.WriteLine(message);
        }
    }

}
